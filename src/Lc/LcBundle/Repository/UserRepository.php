<?php

namespace Lc\LcBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
   public function loadUserByUsername($username) {
     return $this->getEntityManager()
         ->createQuery('SELECT u FROM
         LcLcBundle:User u
         WHERE u.username = :username
         OR u.email = :username
         AND u.is_active = 1'
         )
         ->setParameters(array(
                       'username' => $username
                        ))
         ->getOneOrNullResult();
    }
 
    public function refreshUser(UserInterface $user) {
        return $this->loadUserByUsername($user->getUsername());
    }
 
    public function supportsClass($class) {
        return $class === 'Lc\LcBundle\Entity\User';
    }
    
    public function loadOthers($sex = null, $id1 = null) {

	$query = $this->getEntityManager()
			->createQuery('SELECT u FROM
			LcLcBundle:User u
			WHERE u.sex != :sex
			AND u.id NOT IN (SELECT IDENTITY (f.user2) FROM LcLcBundle:Friend f where f.user1 = :id1)
			AND u.id NOT IN (SELECT IDENTITY (fr.user1) FROM LcLcBundle:Friend fr where fr.user2 = :id1)'
			)
			->setMaxResults(8)
			->setParameters(array(
						   'id1' => $id1,
						   'sex' => $sex,
							));
 
        try {
            $love = $query->getResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
        $love = null;
          }
 
        return $love;
    }
    
    public function countAll($sex = null, $id1 = null) {

	$query = $this->getEntityManager()
			->createQuery('SELECT u FROM
			LcLcBundle:User u
			WHERE u.sex != :sex
			AND u.id NOT IN (SELECT IDENTITY (f.user2) FROM LcLcBundle:Friend f where f.user1 = :id1)
			AND u.id NOT IN (SELECT IDENTITY (fr.user1) FROM LcLcBundle:Friend fr where fr.user2 = :id1)'
			)
			->setParameters(array(
						   'id1' => $id1,
						   'sex' => $sex,
							));
 
        try {
            $love = $query->getResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
        $love = null;
          }
          
        $love = count($love);
 
        return $love;
    }
    
    public function loadAll($sex = null, $id1 = null, $key = null) {

		if($key)
		{
		$query = $this->getEntityManager()
		->createQuery('SELECT u FROM
		LcLcBundle:User u
		WHERE u.sex != :sex
		AND u.id NOT IN (SELECT IDENTITY (f.user2) FROM LcLcBundle:Friend f where f.user1 = :id1)
		AND u.id NOT IN (SELECT IDENTITY (fr.user1) FROM LcLcBundle:Friend fr where fr.user2 = :id1)
		AND u.id IN (SELECT IDENTITY (p.user) FROM LcLcBundle:Profile p where p.name LIKE :key)'
		)
		->setParameters(array(
					   'id1' => $id1,
					   'sex' => $sex,
					   'key' => '%'.$key.'%',
		));
		}
		else
		{
		$query = $this->getEntityManager()
		->createQuery('SELECT u FROM
		LcLcBundle:User u
		WHERE u.sex != :sex
		AND u.id NOT IN (SELECT IDENTITY (f.user2) FROM LcLcBundle:Friend f where f.user1 = :id1)
		AND u.id NOT IN (SELECT IDENTITY (fr.user1) FROM LcLcBundle:Friend fr where fr.user2 = :id1)'
		)->setParameters(array(
					   'id1' => $id1,
					   'sex' => $sex,
		));
		}
 
        return $query;
    }
 
}


